# BiocManager::install("recount")
# BiocManager::install("dorothea")
library("edgeR")
BiocManager::install("edgeR")
library("edgeR")
install.packages("edgeR")
library("edgeR")
library("limma")
library("Glimma")
library("rhdf5")
library("readr")
library("rjson")
library("ggplot2")
library("tibble")
library("qusage")
library("tidyverse")
library("fgsea")
library("data.table")
library("msigdbr")
library("RColorBrewer")
library("topconfects")
library("BiocParallel")
library("tmod")
library("dorothea")
library("recount")
BiocManager::install("Glimma")
# Install and load the required packages
BiocManager::install("edgeR")
warnings
warnings()
?prop.test
prop.test(c(680, 775), n = c(1077, 840), conf.level = 0.99)
prop.test(c(680, 775), n = c(1077, 840), conf.level = 0.99, correct = FALSE)
prop.test(c(680, 775), n = c(1077, 840), conf.level = 0.99, correct = FALSE)
prop.test(c(28, 32), n = c(350, 500), conf.level = 0.9, correct = FALSE)
pt(2.615, df = 14, lower.tail = FALSE)
?dgeom
rgeom(10, prob = 1/2)
rgeom(10, prob = 1/2) + 1
c = rgeom(1000, prob = 1/2)
c
c <- c + 1
c
p = 2 / (2 + c)
p
mean(p)
c <- c + 1
c = rgeom(1000, prob = 1/2)
c <- c + 1
p = 2 / (2 + c)
mean(p)
c = rgeom(10000, prob = 1/2)
c <- c + 1
p = 2 / (2 + c)
mean(p)
c = rgeom(100000, prob = 1/2)
c <- c + 1
p = 2 / (2 + c)
mean(p)
c = rgeom(100000, prob = 1/2)
p = 1 / c
p
c = rgeom(100000, prob = 1/2)
c <- c + 1
1 / c
mean(p)
p <- 1 / c
mean(p)
mean(c)
c = rgeom(100000, prob = 1/2)
c <- c + 1
mean(c)
mean(1 / c)
c = rgeom(1000, prob = 1/2)
mean(c)
c <- c + 1
c
mean(c)
1 / mean(c)
c = rgeom(100000, prob = 1/2)
c <- c + 1
mean(c)
1 / mean(c)
c = rgeom(10000, prob = 1/2)
c <- c + 1
mean(c)
1 / mean(c)
3*12
dpois(3, lambda = 36)
dpois(x = 30, lambda = 36)
1 - dpois(x = 1, lambda = 4.5) - dpois(x = 0, lambda = 4.5)
ppois(x = 2, lambda = 4.5, lower.tail = FALSE)
ppois(q = 2, lambda = 4.5, lower.tail = FALSE)
ppois(q = 1, lambda = 4.5, lower.tail = FALSE)
sqrt(3* 4)
dbinom(32, size = 40, prob = 0.8)
dbinom(30, size = 40, prob = 0.8)
0.8*40*500
500*sqrt(0.8*0.2*40)
0.9*0.8+0.1*0.65
0.1*0.65/(1-0.785)
0.65*0.1/(0.65*0.1+0.9*0.8)
259.2/6
259.2/6+10*25
293.2*4
sqrt(10)
qnorm(1.25) - qnorm(-1.25)
pnorm(1.25) - pnorm(-1.25)
qt(0.025, df = 177)
pnorm(0, mean = -1100, sd = sqrt(415^2+250^2), lower.tail = FALSE)
pnorm(-0.54)
1-0.295
?f.test
?f test
??f.test
x <- c(11.1, 12.18, 13.59, 10.87, 11.92)
y <- c(10.79, 14.25, 8.56, 21.91, 9.17, 12.51)
var.test(x, y)
var.test(y, x)
qf(0.05, df1 = 5, df2 = 4, lower.tail = FALSE)
qf(0.05/2, df1 = 5, df2 = 4, lower.tail = FALSE)
t.test(x, y)
t.test(y, x)
rm(list = ls())
x <- c(105.03, 115.85, 129.88, 102.70, 113.20, 115.32, 121.08)
t.test(x, mean = 104)
mean(x)
pf(51.213, df1 = 2, df2 = 27, lower.tail = FALSE)
qf(0.05, df1 = 2, df2 = 50, lower.tail = FALSE)
qnorm(0.006)
qnorm(-1.42)
pnorm(-1.42)
qnorm(0.006)
-2.51*6/5+74
(70.988-70)/(6/sqrt(25))
pnorm(0.823, lower.tail = FALSE)
pnrom(0.823)
pnorm(0.823)
pnorm(0.82)
pnorm(0.82, lower.tail = FALSE)
qnorm(0.99)
qnorm(0.006)
pnorm(1.2, lower.tail = FALSE)
-1/sqrt(2)
0.5-0.2389
pnorm(2, mean = 2, sd = sqrt(3)) - pnorm(1, mean = 2, sd = sqrt(3))
0.2611*0.218
pnorm(1, mean = 2, sd = 2) - pnorm(-1, mean = 2, sd = 2)
1-0.242
qnorm(0.05)
10+1.645(4)
10+1.645*4
pnorm(1, lower.tail = FALSE)
qt(0.98, df = 18)
pnorm(0.003) - pnorm(-0.337)
pnorm(41, mean = 50, sd = 3)
0.8630 - pnorm(41, mean = 50, sd = 3)
0.8630 + pnorm(41, mean = 50, sd = 3)
qnorm(0.864)
50 + 3*1.098468
qnorm(0.10)
(2-0.85)/1.93
pnorm(0.596, lower.tail = FALSE)
?binomcsd
pbinom(109, size = 400, prob = 0.3, lower.tail = FALSE)
pnorm(-1.145, lower.tail = FALSE)
?t.test
?sample
sample.int(25, size = 10)
sample.int(25, size = 25)
pnorm(2) - pnorm(-3)
0.082^2
0.116^2
0.397^2
sqrt(0.082^2+0.116^2)
0.389^2+0.116^2
sqrt(0.164777)
0.389^2
0.397^2+0.414^2
sqrt(0.329005)
0-0.003/0.574
pnorm(-0.005, lower.tail = FALSE)
pnorm(-2.318, lower.tail = FALSE)
x <- c(4, 11, 8, 7, 5)
y <- c(70, 80, 40, 57, 43)
model <- lm(y ~ x)
summary(model)
z <- c(30, 44, 38, 36, 32)
model2 <- lm(y~ z)
summary(model2)
2.133/1.067
43.067-2.133/2*22
getwd()
rm(list = ls())
setwd("~/Desktop/BE M228")
setwd("~/Desktop/BE M228/Scripts")
# Read in dataset
df <- read.csv("../Data/subject-info.csv")
# Read in dataset
df <- read.csv("../Data/subject-info.csv")
# Read in dataset
df <- read.csv("../Data/subject-info.csv")
library(readr)
subject_info <- read_delim("~/Desktop/BE M228/Data/subject-info.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(subject_info)
# Read in dataset
df <- read_delim("..//Data/subject-info.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
rm(list = ls())
# Read in dataset
df <- read_delim("..//Data/subject-info.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(df)
View(df)
# Preprocessing
# Remove extraneous columns
df <- df[:, 1:105]
# Preprocessing
# Remove extraneous columns
df <- df[, 1:105]
View(df)
# Check for columns with missing values
for (i in 1:ncol(df)){
i
}
# Check for columns with missing values
for (i in 1:ncol(df)){
if (any(is.na(df[,i]))){
i
}
}
df[,1]
# Check for columns with missing values
for (i in 1:ncol(df)){
if (any(is.na(df[,i]))){
num_missing <- sum(is.na(df[,i]))
print(i)
}
}
# Check for columns with missing values
for (i in 1:ncol(df)){
if (any(is.na(df[,i]))){
num_missing <- sum(is.na(df[,i]))
message(past("The column ", i, "has ", num_missing, "values."))
}
}
# Check for columns with missing values
for (i in 1:ncol(df)){
if (any(is.na(df[,i]))){
num_missing <- sum(is.na(df[,i]))
message(paste("The column ", i, "has ", num_missing, "values."))
}
}
# Check for columns with missing values
for (i in 1:ncol(df)){
if (any(is.na(df[,i]))){
num_missing <- sum(is.na(df[,i]))
message(paste("The column ", i, "has ", num_missing, "missing values."))
}
}
colnames(df)
# Check for columns with missing values
for (i in 1:ncol(df)){
if (any(is.na(df[,i]))){
num_missing <- sum(is.na(df[,i]))
message(paste("The column ", colnames(df)[i], "has ", num_missing, "missing values."))
}
}
colnames(df)
View(df)
View(df)
# Groups of patient features
demographics_clinical <- c("Age", "Gender (male=1)", "Weight (kg)", "Height (cm)", "Body Mass Index (Kg/m2)")
df[demographics_clinical]
# Groups of patient features
demographics_clinical <- seq(8, 49)
demographics_clinical
df[,demographics_clinical]
colnames(df)
View(df)
View(df)
# Groups of patient features
# R indexes at 1; shift down by 1 for Python
demographics <- seq(6, 28) # 6, 7, ... 28
radiographic <- c(49, 50)
echocardiographic <- seq(51, 60) # 51, 52, ..., 60
laboratory <- seq(29, 48) # 29, 30, ..., 48
ecg <- seq(63, 71) # 63, 64, ..., 71
holter <- seq(74, 92) # 74, 75, ..., 92
medications <- seq(93, 105) # 93, 94, ..., 105
rm(list = ls())
# Import libraries
library(readr)
# Read in dataset
df <- read_delim("..//Data/subject-info.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
# Preprocessing
# Remove extraneous columns
df <- df[, 1:105]
# Check for columns with missing values
for (i in 1:ncol(df)){
if (any(is.na(df[,i]))){
num_missing <- sum(is.na(df[,i]))
message(paste("The column ", colnames(df)[i], "has ", num_missing, "missing values."))
}
}
# Groups of patient features
# R indexes at 1; shift down by 1 for Python
demographics <- seq(6, 28) # 6, 7, ... 28
radiographic <- c(49, 50)
echocardiographic <- seq(51, 60) # 51, 52, ..., 60
laboratory <- seq(29, 48) # 29, 30, ..., 48
ecg <- seq(63, 71) # 63, 64, ..., 71
holter <- seq(74, 92) # 74, 75, ..., 92
medications <- seq(93, 105) # 93, 94, ..., 105
View(df)
colnames(df)
# Check for columns with missing values
for (i in 1:ncol(df)){
if (any(is.na(df[,i]))){
num_missing <- sum(is.na(df[,i]))
message(paste("The column ", colnames(df)[i], "has ", num_missing, "missing values."))
}
}
26+26+10
df["sin"]
df["ECG rhythm"]
# Limit study to patients with sinus rhythms
df_sinus <- subset(df["ECG rhythm"] == 0)
View(df_sinus)
?subset
# Limit study to patients with sinus rhythms
df_sinus <- df[df$`ECG rhythm` == 0]
# Limit study to patients with sinus rhythms
df_sinus <- df[df$`ECG rhythm` == 0, ]
View(df_sinus)
# Check for columns with missing values
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
message(paste("The column ", colnames(df_sinus)[i], "has ", num_missing, "missing values."))
}
}
702-126
651-597
# Drop columns with more than 10% of values missing
missing_threshold <- nrow(df_sinus) * 10
# Drop columns with more than 10% of values missing
missing_threshold <- nrow(df_sinus) / 10
dropped_columns <- c()
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
if (num_missing >= missing_threshold){
dropped_columns <- c()
}
}
}
# Drop columns with more than 10% of values missing
missing_threshold <- nrow(df_sinus) / 10
dropped_columns <- c()
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
if (num_missing >= missing_threshold){
dropped_columns <- c(dropped_columns, colnames(df_sinus)[i])
}
}
}
library(dplyr)
df_sinus_clean <- df_sinus %>% select(-all_of(dropped_columns))
# Limit study to patients with sinus rhythms
df_sinus <- df[df$`ECG rhythm` == 0, ]
# Drop columns with more than 10% of values missing
missing_threshold <- nrow(df_sinus) / 10
dropped_columns <- c()
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
if (num_missing >= missing_threshold){
dropped_columns <- c(dropped_columns, colnames(df_sinus)[i])
}
}
}
df_sinus <- df_sinus %>% select(-all_of(dropped_columns))
# Check for columns with missing values
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
message(paste("The column ", colnames(df_sinus)[i], "has ", num_missing, "missing values."))
}
}
# For first pass, delete rows with missing values
df_sinus_clean <- na.omit(df_sinus)
View(df_sinus_clean)
View(df_sinus)
# Limit study to patients with sinus rhythms
df_sinus <- df[df$`ECG rhythm` == 0, ]
View(df_sinus)
# Check for columns with missing values
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
message(paste("The column ", colnames(df_sinus)[i], "has ", num_missing, "missing values."))
}
}
unique(df_sinus$`Exit of the study`)
# Assign patients with exit of study as NA to values of 0 (assume survivor)
df_sinus$`Exit of the study`[is.na(df_sinus$`Exit of the study`)] <- 0
# Drop columns with more than 10% of values missing
missing_threshold <- nrow(df_sinus) / 10
dropped_columns <- c()
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
if (num_missing >= missing_threshold){
dropped_columns <- c(dropped_columns, colnames(df_sinus)[i])
}
}
}
View(df_sinus)
df_sinus <- df_sinus %>% select(-all_of(dropped_columns))
# For first pass, delete rows with missing values
df_sinus <- na.omit(df_sinus)
# Limit study to patients with sinus rhythms
df_sinus <- df[df$`ECG rhythm` == 0, ]
# Assign patients with exit of study as NA to values of 0 (assume survivor)
df_sinus$`Exit of the study`[is.na(df_sinus$`Exit of the study`)] <- 0
# Drop columns with more than 10% of values missing
missing_threshold <- nrow(df_sinus) / 10
dropped_columns <- c()
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
if (num_missing >= missing_threshold){
dropped_columns <- c(dropped_columns, colnames(df_sinus)[i])
}
}
}
df_sinus <- df_sinus %>% select(-all_of(dropped_columns))
# For first pass, delete rows with missing values
df_sinus <- na.omit(df_sinus)
# Limit study to patients with sinus rhythms
df_sinus <- df[df$`ECG rhythm` == 0, ]
# Assign patients with exit of study as NA to values of 0 (assume survivor)
df_sinus$`Exit of the study`[is.na(df_sinus$`Exit of the study`)] <- 0
# Drop columns with more than 10% of values missing
missing_threshold <- nrow(df_sinus) / 10
dropped_columns <- c()
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
if (num_missing >= missing_threshold){
dropped_columns <- c(dropped_columns, colnames(df_sinus)[i])
}
}
}
df_sinus <- df_sinus %>% select(-all_of(dropped_columns))
# For first pass, delete rows with missing values
df_sinus <- na.omit(df_sinus)
rm(df_sinus_clean)
View(df_sinus)
1460/365
# Limit study to patients with sinus rhythms
df_sinus <- df[df$`ECG rhythm` == 0, ]
# Assign patients with exit of study as NA to values of 0 (assume survivor)
df_sinus$`Exit of the study`[is.na(df_sinus$`Exit of the study`)] <- 0
# Drop columns with more than 10% of values missing
missing_threshold <- nrow(df_sinus) / 10
dropped_columns <- c()
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
if (num_missing >= missing_threshold){
dropped_columns <- c(dropped_columns, colnames(df_sinus)[i])
}
}
}
df_sinus <- df_sinus %>% select(-all_of(dropped_columns))
# For first pass, delete rows with missing values
df_sinus <- na.omit(df_sinus)
# For first pass, delete rows with missing values
df_sinus <- na.omit(df_sinus) # Results in 535 observations
# Check for columns with missing values
for (i in 1:ncol(df_sinus)){
if (any(is.na(df_sinus[,i]))){
num_missing <- sum(is.na(df_sinus[,i]))
message(paste("The column ", colnames(df_sinus)[i], "has ", num_missing, "missing values."))
}
}
?write.csv
# Print dataframe to csv file (to later be used in Python)
write.csv(df_sinus, file = "subject-info-cleaned.csv")
?write.csv
getwd()
# Print dataframe to csv file (to later be used in Python)
write.csv(df_sinus, file = "/Users/stevenswee/Desktop/BE M228/Scripts/subject-info-cleaned.csv")
View(df_sinus)
# Print dataframe to csv file (to later be used in Python)
write.csv(df_sinus, file = "./Users/stevenswee/Desktop/BE M228/Scripts/subject-info-cleaned.csv")
# Print dataframe to csv file (to later be used in Python)
write.csv(df_sinus, file = "/Users/stevenswee/Desktop/BE M228/Scripts/subject-info-cleaned.csv")
# Print dataframe to csv file (to later be used in Python)
write.csv(df_sinus, file = "/Users/stevenswee/Desktop/BE M228/Data/subject-info-cleaned.csv")
# Print dataframe to csv file (to later be used in Python)
write.csv(df_sinus, file = "~Data/subject-info-cleaned.csv")
# Print dataframe to csv file (to later be used in Python)
write.csv(df_sinus, file = "../Data/subject-info-cleaned.csv")
# Print dataframe to csv file (to later be used in Python)
write.csv(df_sinus, file = "../Data/subject-info-cleaned.csv")
View(df_sinus)
# Read in dataset
df <- read_delim("..//Data/subject-info.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(df)
